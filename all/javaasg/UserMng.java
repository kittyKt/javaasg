/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaasg;

import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.FlatLaf;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.JTableHeader;
import com.formdev.flatlaf.FlatClientProperties;
import designcomponent.ImageAvatar;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.UIManager;
import javax.swing.JTable;
import raven.drawer.Drawer;
import javax.management.*;
import javax.management.Notification;
import javaasg.Add;
import javaasg.adduserv;
import javaasg.login.logintest;
import menunew.MenuEvent;
import raven.popup.GlassPanePopup;
import raven.popup.DefaultOption;
import raven.popup.component.SimplePopupBorder;
import raven.toast.Notifications;
import javax.swing.ImageIcon;
import static javax.swing.SwingConstants.CENTER;


//import raven.glasspanepopup.*;

public class UserMng extends javax.swing.JFrame {
    

    public UserMng() {
        initComponents();
        seticonmain();
        
        raven.popup.GlassPanePopup.install(this);
        raven.toast.Notifications.getInstance().setJFrame(this);
        //raven.glasspanepopup.GlassPanePopup.install(this);
        
        
        
        
        
        loadcsv("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv");
        CSV.setDefaultRenderer(Object.class, new Wrapcellrender());
        adjustColumnWidths(CSV);
        //applyTableStyle(CSV);
        
        
       
        
    }
    
    

   
    
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addB = new designcomponent.buttonlogin();
        Edit = new designcomponent.buttonlogin();
        Delete = new designcomponent.buttonlogin();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        icon = new designcomponent.ImageAvatar();
        jScrollPane2 = new javax.swing.JScrollPane();
        CSV = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(242, 237, 229));

        addB.setBackground(new java.awt.Color(40, 40, 40));
        addB.setText("Add");
        addB.setColor(new java.awt.Color(40, 40, 40));
        addB.setColorClick(new java.awt.Color(121, 121, 121));
        addB.setColorOver(new java.awt.Color(68, 68, 68));
        addB.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        addB.setRadius(30);
        addB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBMouseClicked(evt);
            }
        });
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        Edit.setBackground(new java.awt.Color(40, 40, 40));
        Edit.setText("Edit");
        Edit.setColor(new java.awt.Color(40, 40, 40));
        Edit.setColorClick(new java.awt.Color(121, 121, 121));
        Edit.setColorOver(new java.awt.Color(68, 68, 68));
        Edit.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        Edit.setRadius(30);
        Edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditMouseClicked(evt);
            }
        });
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(40, 40, 40));
        Delete.setText("Delete");
        Delete.setColor(new java.awt.Color(40, 40, 40));
        Delete.setColorClick(new java.awt.Color(121, 121, 121));
        Delete.setColorOver(new java.awt.Color(68, 68, 68));
        Delete.setFont(new java.awt.Font("Helvetica", 0, 12)); // NOI18N
        Delete.setRadius(30);
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(93, 12, 29));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaasg/image/newlogo - Copy.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        icon.setBorderSize(0);
        icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        CSV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "Title 39", "Title 40"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(CSV);
        if (CSV.getColumnModel().getColumnCount() > 0) {
            CSV.getColumnModel().getColumn(0).setPreferredWidth(200);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 960, Short.MAX_VALUE)
                        .addComponent(addB, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EditActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
       //raven.glasspanepopup.GlassPanePopup.showPopup(new Add());
       Add addp=new Add();
       DefaultOption option=new DefaultOption(){
           //@Override
           public boolean closeWhenClickedOutside(){
               return true;
           }
       };
       String actions[]=new String []{"Cancel","Save"};
       GlassPanePopup.showPopup(new SimplePopupBorder(addp, "Create Employee", actions, (pc, i) -> {
            if (i == 1) {
                // save click
                try {
                    
                    //check empty
                    boolean valid = addp.emptyaddv();
                    if(!valid){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Field cannot be empty");
                        return;
                    }
                    
                   
                    //check ic format
                    String NRIC = addp.getIC();
                    boolean validformatic = addp.NRICv(NRIC);
                    if(!validformatic){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Field contain wrong format");
                        return;
                    }
                    
                    //check ic if user exist
                    if(!NRIC.isEmpty()){
                        if (adduserv.validateu(NRIC)){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Employee existed");
                        return;
                        }}
                    
                    //check if username exists (no duplicate username)
                    String username = addp.getusernm();
                    if (adduserv.vusernm(username)){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Username existed");
                        return;
                    }
                    
                addp.savedata();
                Notifications.getInstance().show(Notifications.Type.SUCCESS, "Employee has been created");
                        
                    pc.closePopup();
                    displaycsv("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                pc.closePopup();
            }
        }), option);
       
       
       
       
    }//GEN-LAST:event_addBActionPerformed

    private void addBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addBMouseClicked

    private void EditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditMouseClicked
        Edit editp  = new Edit();
        int[] selectedrows = CSV.getSelectedRows();
        
        if (selectedrows.length ==1){
            int selectedrow = selectedrows[0];
        DefaultOption option=new DefaultOption(){
           //@Override
           public boolean closeWhenClickedOutside(){
               return true;
           }
        };
        String actions[]=new String []{"Cancel","Update"};
        
        
        
        DefaultTableModel model = (DefaultTableModel)CSV.getModel();
        String fn = (String) model.getValueAt(selectedrow, 0);
        String ln = (String) model.getValueAt(selectedrow, 1);
        String nric = (String) model.getValueAt(selectedrow, 2);
        String username = (String) model.getValueAt(selectedrow, 3);
        String psw = (String) model.getValueAt(selectedrow, 4);
        String accs = (String) model.getValueAt(selectedrow, 5);
        String role = (String) model.getValueAt(selectedrow, 6);
        String icon = (String) model.getValueAt(selectedrow, 39);
        
        editp.setfn(fn);
        editp.setln(ln);
        editp.setic(nric);
        editp.setusernm(username);
        editp.setrole(role);
        editp.setpssw(psw);
        editp.setstatus(accs);
        editp.seticon(icon);
        
        
        GlassPanePopup.showPopup(new SimplePopupBorder(editp, "Edit Employees Data", actions, (pc, i) -> {
            if (i == 1) {
                // update
                try {
                    
                    //check empty
                    boolean valid = editp.emptyaddv();
                    if(!valid){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Field cannot be empty");
                        return;
                    }
                    
                   
                    //check ic format
                    String NRIC = editp.getIC();
                    boolean validformatic = editp.NRICv(NRIC);
                    if(!validformatic){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Field contain wrong format");
                        return;
                    }
                    /*
                    //check ic if user exist
                    if(!NRIC.isEmpty()){
                        if (adduserv.validateu(NRIC)){
                        Notifications.getInstance().show(Notifications.Type.ERROR, "Employee existed");
                        return;
                        }}*/
                editp.updatedata(selectedrow);
                Notifications.getInstance().show(Notifications.Type.SUCCESS, "Employee has been created");
                        
                    pc.closePopup();
                    displaycsv("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                pc.closePopup();
            }
        }), option);
        } else{
            Notifications.getInstance().show(Notifications.Type.ERROR, "Please select one row");
        }
    }//GEN-LAST:event_EditMouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        Delete delete = new Delete();
        int[] selectedrows = CSV.getSelectedRows();
        if (selectedrows.length ==1){
            int selectedrow = selectedrows[0];
        DefaultOption option=new DefaultOption(){
           //@Override
           public boolean closeWhenClickedOutside(){
               return true;
           }
        };
        String actions[]=new String []{"Cancel","Delete"};
        
        DefaultTableModel model = (DefaultTableModel) CSV.getModel();
        String fn = (String) model.getValueAt(selectedrow, 0);
        String ln = (String) model.getValueAt(selectedrow, 1);
        String nric = (String) model.getValueAt(selectedrow, 2);
        
        delete.setfn(fn);
        delete.setln(ln);
        delete.setic(nric);
        
        GlassPanePopup.showPopup(new SimplePopupBorder(delete, "Delete Confirmation", actions, (pc, i) -> {
            if (i == 1) {
         try {
            // Read all lines from the existing CSV file
            BufferedReader reader = new BufferedReader(new FileReader("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv"));
            List<String> lines = new ArrayList<>();
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
            reader.close();

            // Remove the line corresponding to the deleted NRIC
            BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv"));
            for (String l : lines) {
                String[] values = l.split(",");
                if (!values[2].equals(nric)) {
                    writer.write(l);
                    writer.newLine();
                }
            }
            writer.close();
            
            model.removeRow(selectedrow);
            pc.closePopup();
            
            displaycsv("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv");
            Notifications.getInstance().show(Notifications.Type.SUCCESS, "Deleted successfully");
            
        }catch (IOException e) {
            e.printStackTrace();
            Notifications.getInstance().show(Notifications.Type.ERROR, "Error deleting employee: " + e.getMessage());
        }
            
    } else {
                pc.closePopup();
            }
}), option);
        Notifications.getInstance().show(Notifications.Type.ERROR, "Please select one row");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    
    
    
    public void setIconFromCSV() {
        String[] adminDetails = logintest.getuserDetails();

        if (adminDetails != null && adminDetails.length > 0) {
            String iconPath = adminDetails[39];

            if (iconPath != null && !iconPath.isEmpty()) {
                ImageIcon icon = new ImageIcon(iconPath);
                this.setIconImage(icon.getImage());
            }else {
                System.err.println("Icon path is empty or invalid.");
            }
        }
    }
    
    private void seticonmain(){
        ImageAvatar aicon = new ImageAvatar();
        Profile prof = new Profile();
        
        String[] adminDetails = logintest.getuserDetails();

        updateProfilemain(adminDetails[39]);
        
        //String fullName = adminDetails[0] + " " + adminDetails[1];
    
        //adminnm.setText(fullName);
    }
    
     public void updateProfilemain(String imagePath) {
        ImageIcon profileIcon = new ImageIcon(imagePath);
         if (profileIcon.getImage() != null) {
                icon.setImage(profileIcon); 
                revalidate();
                repaint();
            } else {
                System.err.println("Failed to load image from path: " + imagePath);
            }
    }
     
    private void iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconMouseClicked
       Profile userprof = new Profile();
       
       String[] adminDetails = logintest.getuserDetails();
       
       userprof.updateProfileImage(adminDetails[39]);
       userprof.setuserprofile(adminDetails[3], adminDetails[4]);
       
       
       
       userprof.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_iconMouseClicked

    private void loadcsv(String file){
        DefaultTableModel tmodel = (DefaultTableModel) CSV.getModel();
        CSV.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tmodel.setRowCount(0);
        try(
            BufferedReader read = new BufferedReader(new FileReader(file))){
            String line;
            boolean fline= true;
            
            while((line = read.readLine())!=null){
                String[] data = line.split(",");
                if (fline){
                    tmodel.setColumnIdentifiers(data);
                    fline=false;
                    
                }else{
                    tmodel.addRow(data);
                }
            }
            adjustColumnWidths(CSV);
            adjustRowHeights(CSV);
            applyTableStyle(CSV);
        }catch (IOException e){
            e.printStackTrace();
        } 
        
    }
    private void applyTableStyle(JTable table){
//       table.getTableHeader().putClientProperty(FlatClientProperties.STYLE_CLASS,"table_style");
//       table.putClientProperty(FlatClientProperties.STYLE_CLASS,"table_style");
       
//    JTableHeader header = table.getTableHeader();
//    header.setDefaultRenderer(new HeaderRenderer());
    table.setDefaultRenderer(Object.class, new Wrapcellrender());
    }
    
    private void adjustColumnWidths(JTable table) {
   TableColumnModel columnModel = table.getColumnModel();
   
  
    for (int i = 0; i < columnModel.getColumnCount(); i++) {
        TableColumn column = columnModel.getColumn(i);
       // int columnIndex = column.getModelIndex();
        
        
        int minWidth = 100; 
        int preferredWidth = minWidth;

        // Calculate the maximum width required for cells in this column
        for (int row = 0; row < table.getRowCount(); row++) {
            TableCellRenderer renderer = table.getCellRenderer(row, i);
            Component comp = renderer.getTableCellRendererComponent(table, table.getValueAt(row, i), false, false, row, i);
            //TableCellRenderer renderer = table.getCellRenderer(row, columnIndex);
            //Component comp = renderer.getTableCellRendererComponent(table, table.getValueAt(row, columnIndex), false, false, row, columnIndex);
            preferredWidth = Math.max(comp.getPreferredSize().width, preferredWidth);
        }

        // Include the column header width
        TableCellRenderer headerRenderer = table.getTableHeader().getDefaultRenderer();
        Component headerComp = headerRenderer.getTableCellRendererComponent(table, column.getHeaderValue(), false, false, -1, i);
        preferredWidth = Math.max(headerComp.getPreferredSize().width, preferredWidth);

        // Apply width to the column, with some padding
        column.setPreferredWidth(preferredWidth + table.getIntercellSpacing().width);
    }
    // Optionally, adjust table size after width adjustment
    table.setPreferredScrollableViewportSize(table.getPreferredSize());
}
    
private void adjustRowHeights(JTable table) {
        for (int row = 0; row < table.getRowCount(); row++) {
        int maxHeight = 0;
        
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
            Component comp = table.prepareRenderer(cellRenderer, row, column);
            int height = comp.getPreferredSize().height;
            maxHeight = Math.max(maxHeight, height);
        }
        
        table.setRowHeight(row, maxHeight);
    }
    }

private class Wrapcellrender extends JTextArea implements TableCellRenderer {

        private final java.util.List<java.util.List<Integer>> rowAndCellHeights = new ArrayList<>();
          
        public Wrapcellrender() {
            setLineWrap(true);
            setWrapStyleWord(true);
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value != null ? value.toString() : "");
            //int width = table.getColumnModel().getColumn(column).getWidth();
            //setSize(width, getPreferredSize().height);
            setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);
            setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
            
            adjustrowHeight(table, row, column);
            
            return this;
        }
        
        
        
         private void adjustrowHeight(JTable table, int row, int column) {
        setBounds(table.getCellRect(row, column, false));
        int preferredHeight = getPreferredSize().height;
        while (rowAndCellHeights.size() <= row) {
            rowAndCellHeights.add(new ArrayList<>(column));
        }
        
        while (rowAndCellHeights.size() <= row) {
            rowAndCellHeights.add(new ArrayList<>(column));
        }
        
        var list = rowAndCellHeights.get(row);
        while (list.size() <= column) {
            list.add(0);
        }
        list.set(column, preferredHeight);
        int max = list.stream().max((x, y) -> Integer.compare(x, y)).get();
        if (table.getRowHeight(row) != max) {
            table.setRowHeight(row, max);
        }
    }
    }

    private void displaycsv(String file) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            DefaultTableModel model = (DefaultTableModel) CSV.getModel();
            model.setRowCount(0);
            String line;
            boolean isFirstLine = true;

            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                    
                if (isFirstLine) {
                // Include all original columns, including the first one
                model.setColumnIdentifiers(values);
                isFirstLine = false;
            } else {
                model.addRow(values);
            }
            }
            adjustColumnWidths(CSV);
            applyTableStyle(CSV);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading CSV file: " + e.getMessage());
        }
    }
    /*
     public class TextAreaRenderer extends JTextArea implements TableCellRenderer {

        public TextAreaRenderer() {
            setLineWrap(true);
            setWrapStyleWord(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value != null ? value.toString() : "");
            setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);

            if (table.getRowHeight(row) != getPreferredSize().height) {
                table.setRowHeight(row, getPreferredSize().height);
            }
             if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
             }
            return this;
        }
        }

        public class HeaderRenderer extends JLabel implements TableCellRenderer {
        public HeaderRenderer() {
            setOpaque(true);
            setHorizontalAlignment(CENTER);
            
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText(value != null ? value.toString() : "");
        setToolTipText("<html>" + getText().replace("\n", "<br>") + "</html>");
        
        // Adjust size to ensure the full header text is displayed
        setPreferredSize(new Dimension(getPreferredSize().width, getPreferredSize().height));

        return this;
    }
    }
    */
    public static void main(String args[]) {
       FlatMacDarkLaf.setup();
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMng().setVisible(true);
            }
        });
    }
    
   
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CSV;
    private designcomponent.buttonlogin Delete;
    private designcomponent.buttonlogin Edit;
    private designcomponent.buttonlogin addB;
    private designcomponent.ImageAvatar icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
