/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package javaasg;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;


public class forgotpssw extends javax.swing.JPanel {

   
    public forgotpssw() {
        initComponents();
    }
    
    public boolean savepssw() {
        String file="C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\Employees_DetailsCSV.csv";
        
        String username = txtusername.getText();
        String nric = txtNRIC.getText();
        String newpsw = txtnps.getText();
        String confirmpsw = txtcps.getText();
        
        if (emptyfp() && matchpw(newpsw, confirmpsw)) {
            List<String> lines = new ArrayList<>();
            String line;
            boolean isUpdated = false;

            try (BufferedReader read = new BufferedReader(new FileReader(file))) {
                while ((line = read.readLine()) != null) {
                    String[] fields = line.split(",");
                    if (fields.length >= 5 && fields[3].equals(username) && fields[2].equals(nric)) {
                    // Update the password field
                    fields[4] = newpsw;
                    isUpdated = true;
                    }
                    lines.add(String.join(",", fields));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (isUpdated) {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                    for (String updatedLine : lines) {
                        bw.write(updatedLine);
                        bw.newLine();
                    }
                    
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } 
            return isUpdated;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Username = new javax.swing.JLabel();
        NRIC = new javax.swing.JLabel();
        newps = new javax.swing.JLabel();
        cpsw = new javax.swing.JLabel();
        txtusername = new javax.swing.JTextField();
        txtnps = new javax.swing.JTextField();
        txtcps = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        txtNRIC = new javax.swing.JTextField();

        Username.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        Username.setText("Username");

        NRIC.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        NRIC.setText("NRIC");

        newps.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        newps.setText("New Password");

        cpsw.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cpsw.setText("Confirm Password");

        txtusername.setBackground(new java.awt.Color(254, 254, 239));
        txtusername.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtusername.setForeground(new java.awt.Color(51, 51, 51));
        txtusername.setAutoscrolls(false);
        txtusername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        txtnps.setBackground(new java.awt.Color(254, 254, 239));
        txtnps.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtnps.setForeground(new java.awt.Color(51, 51, 51));
        txtnps.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        txtcps.setBackground(new java.awt.Color(254, 254, 239));
        txtcps.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtcps.setForeground(new java.awt.Color(51, 51, 51));
        txtcps.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        txtNRIC.setBackground(new java.awt.Color(254, 254, 239));
        txtNRIC.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtNRIC.setForeground(new java.awt.Color(51, 51, 51));
        txtNRIC.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newps)
                            .addComponent(NRIC)
                            .addComponent(Username)
                            .addComponent(cpsw))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtusername)
                            .addComponent(txtnps)
                            .addComponent(txtcps, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(txtNRIC)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Username)
                    .addComponent(txtusername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NRIC)
                    .addComponent(txtNRIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newps)
                    .addComponent(txtnps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpsw)
                    .addComponent(txtcps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public boolean matchpw(String newpsw, String confirmpsw){
        return newpsw.equals(confirmpsw);
    }
    
        //kenot be mt
    public boolean emptyfp() {
    if (txtusername.getText().isEmpty()) {
        return false;
    }
    if (txtNRIC.getText().isEmpty()) {
        return false;
    }
    if (txtcps.getText().isEmpty()) {
        return false;
    }
    if (txtnps.getText().isEmpty()) {
        return false;
    }
    
    return true;
}
    
    public boolean NRICv(String txtNRIC){
        return txtNRIC.matches("\\d{12}");
    }
    
    public boolean uic(String[] fields, String username, String nric){
        return fields[3].equals(username)&& fields[2].equals(nric);
    }
    
    public String getIC(){
        return txtNRIC.getText();
    }
    
    public String getnps(){
        return txtnps.getText();
    }
    
    public String getcps(){
        return txtcps.getText();
    }
    
    public String getusernm(){
        return txtusername.getText();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NRIC;
    private javax.swing.JLabel Username;
    private javax.swing.JLabel cpsw;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel newps;
    private javax.swing.JTextField txtNRIC;
    private javax.swing.JTextField txtcps;
    private javax.swing.JTextField txtnps;
    private javax.swing.JTextField txtusername;
    // End of variables declaration//GEN-END:variables
}
