/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package departmentmanager;

import javax.swing.*;
import java.awt.*;


import javax.swing.table.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellRenderer;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import com.formdev.flatlaf.*;
import com.formdev.flatlaf.FlatClientProperties;
import java.util.ArrayList;

import javax.swing.UIManager;
import javax.swing.JTable;
import raven.drawer.Drawer;
import raven.popup.*;
import raven.toast.Notifications;

public class Approved extends javax.swing.JPanel {

    
    public Approved() {
        initComponents();
        loadfaq("C:\\Users\\acer\\Documents\\NetBeansProjects\\JavaAsg\\src\\csv\\leave_applications.csv");
        allcsv.setDefaultRenderer(Object.class, new Wrapcellrender());
        //applyTableStyle(faqcsv);
        adjustColumnWidths(allcsv);
        //adjustRowHeights(faqcsv);
    }
    
   
    
    public JTable leave(){
        return allcsv;
    }
    
    public void setinqr(JTable leave) {
    this.allcsv = leave;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        allcsv = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(254, 253, 250));

        allcsv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(allcsv);
        if (allcsv.getColumnModel().getColumnCount() > 0) {
            allcsv.getColumnModel().getColumn(0).setResizable(false);
            allcsv.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Approved Applications");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //faqcsv part
    private void loadfaq(String file){
        DefaultTableModel tmodel = (DefaultTableModel)allcsv.getModel();
        tmodel.setRowCount(0);
        try(
            BufferedReader read = new BufferedReader(new FileReader(file))){
            String line;
            boolean fline= true;
            
            while((line = read.readLine())!=null){
                String[] data = line.split(",");
                if (fline) {
                    tmodel.setColumnIdentifiers(data);
                fline = false;
                continue; 
            }
                
                if (data.length > 4 && data[5].equalsIgnoreCase("Approved")){
                    tmodel.addRow(data); 
                    
                }
            }
            adjustColumnWidths(allcsv);
            adjustRowHeights(allcsv);
            applyTableStyle(allcsv);
        }catch (IOException e){
            e.printStackTrace();
        } 
       
    }
    
    private void applyTableStyle(JTable table){
        //table.getTableHeader().putClientProperty(FlatClientProperties.STYLE_CLASS,"table_style");
        //table.putClientProperty(FlatClientProperties.STYLE_CLASS,"table_style");
        table.setDefaultRenderer(Object.class, new Wrapcellrender());
    }
    
    private void adjustColumnWidths(JTable table) {
    TableColumnModel columnModel = table.getColumnModel();
    
    
    
    
    for (int i = 0; i < columnModel.getColumnCount(); i++) {
        TableColumn column = columnModel.getColumn(i);
        //int columnIndex = column.getModelIndex();
        
        
        int minWidth = 200; 
        int preferredWidth = minWidth;

        // Calculate the maximum width required for cells in this column
        for (int row = 0; row < table.getRowCount(); row++) {
            TableCellRenderer renderer = table.getCellRenderer(row, i);
            Component comp = renderer.getTableCellRendererComponent(table, table.getValueAt(row, i), false, false, row, i);
            //TableCellRenderer renderer = table.getCellRenderer(row, columnIndex);
            //Component comp = renderer.getTableCellRendererComponent(table, table.getValueAt(row, columnIndex), false, false, row, columnIndex);
            preferredWidth = Math.max(comp.getPreferredSize().width, preferredWidth);
        }

        // Include the column header width
        TableCellRenderer headerRenderer = table.getTableHeader().getDefaultRenderer();
        Component headerComp = headerRenderer.getTableCellRendererComponent(table, column.getHeaderValue(), false, false, -1, i);
        preferredWidth = Math.max(headerComp.getPreferredSize().width, preferredWidth);

        // Apply width to the column, with some padding
        column.setPreferredWidth(preferredWidth + table.getIntercellSpacing().width);
    }
    // Optionally, adjust table size after width adjustment
    table.setPreferredScrollableViewportSize(table.getPreferredSize());
}
    
    
 
    
    private void adjustRowHeights(JTable table) {
        for (int row = 0; row < table.getRowCount(); row++) {
        int maxHeight = 0;
        
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
            Component comp = table.prepareRenderer(cellRenderer, row, column);
            int height = comp.getPreferredSize().height;
            maxHeight = Math.max(maxHeight, height);
        }
        
        table.setRowHeight(row, maxHeight);
    }
    }

     private class Wrapcellrender extends JTextArea implements TableCellRenderer {

        private final java.util.List<java.util.List<Integer>> rowAndCellHeights = new ArrayList<>();
          
        public Wrapcellrender() {
            setLineWrap(true);
            setWrapStyleWord(true);
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value != null ? value.toString() : "");
            //int width = table.getColumnModel().getColumn(column).getWidth();
            //setSize(width, getPreferredSize().height);
            setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);
            setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
            
            adjustrowHeight(table, row, column);
            
            return this;
        }
        
        
        
         private void adjustrowHeight(JTable table, int row, int column) {
        setBounds(table.getCellRect(row, column, false));
        int preferredHeight = getPreferredSize().height;
        while (rowAndCellHeights.size() <= row) {
            rowAndCellHeights.add(new ArrayList<>(column));
        }
        
        while (rowAndCellHeights.size() <= row) {
            rowAndCellHeights.add(new ArrayList<>(column));
        }
        
        var list = rowAndCellHeights.get(row);
        while (list.size() <= column) {
            list.add(0);
        }
        list.set(column, preferredHeight);
        int max = list.stream().max((x, y) -> Integer.compare(x, y)).get();
        if (table.getRowHeight(row) != max) {
            table.setRowHeight(row, max);
        }
    }
    }
     
    public void displaycsv(String file) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            DefaultTableModel model = (DefaultTableModel) allcsv.getModel();
            model.setRowCount(0);
            String line;
            boolean isFirstLine = true;

            while ((line = br.readLine()) != null) {
                String[] values = line.split(";");
                    
                if (isFirstLine) {
                // Include all original columns, including the first one
                model.setColumnIdentifiers(values);
                isFirstLine = false;
            } else {
                model.addRow(values);
            }
            }
            adjustColumnWidths(allcsv);
            applyTableStyle(allcsv);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading CSV file: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allcsv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
